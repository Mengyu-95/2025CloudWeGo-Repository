// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: name/name.proto

package name

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameClient is the client API for Name service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameClient interface {
	// 注册
	Register(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	// 删除
	Delete(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	// 保活
	Keepalive(ctx context.Context, opts ...grpc.CallOption) (Name_KeepaliveClient, error)
	// 获取
	GetAddress(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
}

type nameClient struct {
	cc grpc.ClientConnInterface
}

func NewNameClient(cc grpc.ClientConnInterface) NameClient {
	return &nameClient{cc}
}

func (c *nameClient) Register(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/grpc.name.Name/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameClient) Delete(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/grpc.name.Name/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameClient) Keepalive(ctx context.Context, opts ...grpc.CallOption) (Name_KeepaliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Name_ServiceDesc.Streams[0], "/grpc.name.Name/Keepalive", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameKeepaliveClient{stream}
	return x, nil
}

type Name_KeepaliveClient interface {
	Send(*NameRequest) error
	CloseAndRecv() (*NameResponse, error)
	grpc.ClientStream
}

type nameKeepaliveClient struct {
	grpc.ClientStream
}

func (x *nameKeepaliveClient) Send(m *NameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameKeepaliveClient) CloseAndRecv() (*NameResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameClient) GetAddress(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/grpc.name.Name/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServer is the server API for Name service.
// All implementations must embed UnimplementedNameServer
// for forward compatibility
type NameServer interface {
	// 注册
	Register(context.Context, *NameRequest) (*NameResponse, error)
	// 删除
	Delete(context.Context, *NameRequest) (*NameResponse, error)
	// 保活
	Keepalive(Name_KeepaliveServer) error
	// 获取
	GetAddress(context.Context, *NameRequest) (*NameResponse, error)
	mustEmbedUnimplementedNameServer()
}

// UnimplementedNameServer must be embedded to have forward compatible implementations.
type UnimplementedNameServer struct {
}

func (UnimplementedNameServer) Register(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNameServer) Delete(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNameServer) Keepalive(Name_KeepaliveServer) error {
	return status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (UnimplementedNameServer) GetAddress(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedNameServer) mustEmbedUnimplementedNameServer() {}

// UnsafeNameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServer will
// result in compilation errors.
type UnsafeNameServer interface {
	mustEmbedUnimplementedNameServer()
}

func RegisterNameServer(s grpc.ServiceRegistrar, srv NameServer) {
	s.RegisterService(&Name_ServiceDesc, srv)
}

func _Name_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.name.Name/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServer).Register(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Name_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.name.Name/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServer).Delete(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Name_Keepalive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameServer).Keepalive(&nameKeepaliveServer{stream})
}

type Name_KeepaliveServer interface {
	SendAndClose(*NameResponse) error
	Recv() (*NameRequest, error)
	grpc.ServerStream
}

type nameKeepaliveServer struct {
	grpc.ServerStream
}

func (x *nameKeepaliveServer) SendAndClose(m *NameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameKeepaliveServer) Recv() (*NameRequest, error) {
	m := new(NameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Name_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.name.Name/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServer).GetAddress(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Name_ServiceDesc is the grpc.ServiceDesc for Name service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Name_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.name.Name",
	HandlerType: (*NameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Name_Register_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Name_Delete_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Name_GetAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Keepalive",
			Handler:       _Name_Keepalive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "name/name.proto",
}
