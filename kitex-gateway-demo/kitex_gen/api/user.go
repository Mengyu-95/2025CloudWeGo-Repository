// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type User struct {
	Id    int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name  string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Age   int32  `thrift:"age,3" frugal:"3,default,i32" json:"age"`
	Email string `thrift:"email,4" frugal:"4,default,string" json:"email"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetId() (v int64) {
	return p.Id
}

func (p *User) GetName() (v string) {
	return p.Name
}

func (p *User) GetAge() (v int32) {
	return p.Age
}

func (p *User) GetEmail() (v string) {
	return p.Email
}
func (p *User) SetId(val int64) {
	p.Id = val
}
func (p *User) SetName(val string) {
	p.Name = val
}
func (p *User) SetAge(val int32) {
	p.Age = val
}
func (p *User) SetEmail(val string) {
	p.Email = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "id",
	2: "name",
	3: "age",
	4: "email",
}

type GetUserRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewGetUserRequest() *GetUserRequest {
	return &GetUserRequest{}
}

func (p *GetUserRequest) InitDefault() {
}

func (p *GetUserRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetUserRequest) SetId(val int64) {
	p.Id = val
}

func (p *GetUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserRequest(%+v)", *p)
}

var fieldIDToName_GetUserRequest = map[int16]string{
	1: "id",
}

type GetUserResponse struct {
	User *User `thrift:"user,1" frugal:"1,default,User" json:"user"`
}

func NewGetUserResponse() *GetUserResponse {
	return &GetUserResponse{}
}

func (p *GetUserResponse) InitDefault() {
}

var GetUserResponse_User_DEFAULT *User

func (p *GetUserResponse) GetUser() (v *User) {
	if !p.IsSetUser() {
		return GetUserResponse_User_DEFAULT
	}
	return p.User
}
func (p *GetUserResponse) SetUser(val *User) {
	p.User = val
}

func (p *GetUserResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *GetUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserResponse(%+v)", *p)
}

var fieldIDToName_GetUserResponse = map[int16]string{
	1: "user",
}

type UserService interface {
	GetUser(ctx context.Context, req *GetUserRequest) (r *GetUserResponse, err error)

	StreamUsers(stream UserService_StreamUsersServer) (err error)
}

type UserServiceGetUserArgs struct {
	Req *GetUserRequest `thrift:"req,1" frugal:"1,default,GetUserRequest" json:"req"`
}

func NewUserServiceGetUserArgs() *UserServiceGetUserArgs {
	return &UserServiceGetUserArgs{}
}

func (p *UserServiceGetUserArgs) InitDefault() {
}

var UserServiceGetUserArgs_Req_DEFAULT *GetUserRequest

func (p *UserServiceGetUserArgs) GetReq() (v *GetUserRequest) {
	if !p.IsSetReq() {
		return UserServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserArgs) SetReq(val *GetUserRequest) {
	p.Req = val
}

func (p *UserServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserResult struct {
	Success *GetUserResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserResult() *UserServiceGetUserResult {
	return &UserServiceGetUserResult{}
}

func (p *UserServiceGetUserResult) InitDefault() {
}

var UserServiceGetUserResult_Success_DEFAULT *GetUserResponse

func (p *UserServiceGetUserResult) GetSuccess() (v *GetUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserResponse)
}

func (p *UserServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserResult = map[int16]string{
	0: "success",
}

type UserServiceStreamUsersArgs struct {
	Req *GetUserRequest `thrift:"req,1" frugal:"1,default,GetUserRequest" json:"req"`
}

func NewUserServiceStreamUsersArgs() *UserServiceStreamUsersArgs {
	return &UserServiceStreamUsersArgs{}
}

func (p *UserServiceStreamUsersArgs) InitDefault() {
}

var UserServiceStreamUsersArgs_Req_DEFAULT *GetUserRequest

func (p *UserServiceStreamUsersArgs) GetReq() (v *GetUserRequest) {
	if !p.IsSetReq() {
		return UserServiceStreamUsersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceStreamUsersArgs) SetReq(val *GetUserRequest) {
	p.Req = val
}

func (p *UserServiceStreamUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceStreamUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceStreamUsersArgs(%+v)", *p)
}

var fieldIDToName_UserServiceStreamUsersArgs = map[int16]string{
	1: "req",
}

type UserServiceStreamUsersResult struct {
	Success *GetUserResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserResponse" json:"success,omitempty"`
}

func NewUserServiceStreamUsersResult() *UserServiceStreamUsersResult {
	return &UserServiceStreamUsersResult{}
}

func (p *UserServiceStreamUsersResult) InitDefault() {
}

var UserServiceStreamUsersResult_Success_DEFAULT *GetUserResponse

func (p *UserServiceStreamUsersResult) GetSuccess() (v *GetUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceStreamUsersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceStreamUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserResponse)
}

func (p *UserServiceStreamUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceStreamUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceStreamUsersResult(%+v)", *p)
}

var fieldIDToName_UserServiceStreamUsersResult = map[int16]string{
	0: "success",
}

type UserService_StreamUsersServer interface {
	streaming.Stream

	Recv() (*GetUserRequest, error)

	Send(*GetUserResponse) error
}
