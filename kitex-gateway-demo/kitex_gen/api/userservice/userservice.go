// Code generated by Kitex v0.13.0. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	api "github.com/yourusername/kitex-gateway-demo/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetUser": kitex.NewMethodInfo(
		getUserHandler,
		newUserServiceGetUserArgs,
		newUserServiceGetUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StreamUsers": kitex.NewMethodInfo(
		streamUsersHandler,
		newUserServiceStreamUsersArgs,
		newUserServiceStreamUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*api.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.0",
		Extra:           extra,
	}
	return svcInfo
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserServiceGetUserArgs)
	realResult := result.(*api.UserServiceGetUserResult)
	success, err := handler.(api.UserService).GetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserArgs() interface{} {
	return api.NewUserServiceGetUserArgs()
}

func newUserServiceGetUserResult() interface{} {
	return api.NewUserServiceGetUserResult()
}

func streamUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("UserService.StreamUsers is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &userServiceStreamUsersServer{st.Stream}
	return handler.(api.UserService).StreamUsers(stream)
}

type userServiceStreamUsersClient struct {
	streaming.Stream
}

func (x *userServiceStreamUsersClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *userServiceStreamUsersClient) Send(m *api.GetUserRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *userServiceStreamUsersClient) Recv() (*api.GetUserResponse, error) {
	m := new(api.GetUserResponse)
	return m, x.Stream.RecvMsg(m)
}

type userServiceStreamUsersServer struct {
	streaming.Stream
}

func (x *userServiceStreamUsersServer) Send(m *api.GetUserResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *userServiceStreamUsersServer) Recv() (*api.GetUserRequest, error) {
	m := new(api.GetUserRequest)
	return m, x.Stream.RecvMsg(m)
}

func newUserServiceStreamUsersArgs() interface{} {
	return api.NewUserServiceStreamUsersArgs()
}

func newUserServiceStreamUsersResult() interface{} {
	return api.NewUserServiceStreamUsersResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUser(ctx context.Context, req *api.GetUserRequest) (r *api.GetUserResponse, err error) {
	var _args api.UserServiceGetUserArgs
	_args.Req = req
	var _result api.UserServiceGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamUsers(ctx context.Context) (UserService_StreamUsersClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "StreamUsers", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &userServiceStreamUsersClient{res.Stream}
	return stream, nil
}
